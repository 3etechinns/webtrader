{"version":3,"sources":["../../../../src/charts/chartTemplateManager.es6"],"names":["define","$","chartWindow","rv","require","local_storage","get","set","ChartTemplateManager","root","dialog_id","state","init_state","append","html","view","bind","chart","highcharts","route","value","menu","save_changes_disabled","templates","array","save_as_value","rename_tmpl","rename_value","current","current_tmpl","get_chart_options","_","findIndex","t","name","update","save_as","options","timePeriod","type","concat","indicators","map","ind","overlays","overlay","displaySymbol","join","save_changes","inx","push","growl","notice","message","i18n","includes","error","set_chart_options","remove","tmpl","filter","rename","do_rename","new_name","find","apply","apply_chart_options","unbind","init"],"mappings":"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","file":"chartTemplateManager.js","sourcesContent":["/**\n * Created by amin on July 31, 2016.\n */\ndefine(['jquery', 'charts/chartWindow', 'common/rivetsExtra'], function($, chartWindow, rv) {\n  require(['text!charts/chartTemplateManager.html']);\n\n  if(!local_storage.get('templates')) {\n    local_storage.set('templates', []);\n  }\n\n  class ChartTemplateManager {\n    constructor(root, dialog_id) {\n      const state = this.init_state(root, dialog_id);\n      require(['text!charts/chartTemplateManager.html'], html => {\n        root.append(html);\n        this.view = rv.bind(root[0], state);\n      });\n    }\n\n    init_state(root, dialog_id) {\n      const chart = $('#' + dialog_id + '_chart').highcharts();\n      const state = {\n        route: { value: 'menu' },\n        menu: {\n          save_changes_disabled: true\n        },\n        templates: {\n          array: local_storage.get('templates'),\n          save_as_value: '',\n          rename_tmpl: null,\n          rename_value: '',\n          current: null,\n        }\n      };\n      const {route, templates, menu} = state;\n\n      /* persist applied templates between page reloads */\n      const current_tmpl = chartWindow.get_chart_options(dialog_id);\n      if(_.findIndex(templates.array, t => t.name === current_tmpl.name) !== -1) {\n        templates.current = current_tmpl;\n      }\n\n      route.update = value => {\n        route.value = value;\n      };\n\n      menu.save_as = () => {\n        const options = chartWindow.get_chart_options(dialog_id) || {};\n        options.name = [`${options.timePeriod} ${options.type}`]\n                      .concat(options.indicators.map(ind => ind.name))\n                      .concat(options.overlays.map(overlay => overlay.displaySymbol))\n                      .join(' + ');\n        templates.save_as_value = options.name;\n        route.update('save-as');\n      }\n\n      menu.templates = () => {\n        templates.array = local_storage.get('templates'); // it can be modified from other dialogs.\n        route.update('templates');\n      }\n\n      menu.save_changes = () => {\n        const current = chartWindow.get_chart_options(dialog_id);\n\n        const name = current.name;\n        const array = local_storage.get('templates');\n        const inx = _.findIndex(array, t => t.name === name);\n        if(inx !== -1) {\n          array[inx] = current;\n        } else {\n          array.push(current);\n        }\n        local_storage.set('templates', array);\n        templates.array = array;\n        templates.current = current;\n        $.growl.notice({message: 'Template changes saved '.i18n() + '(' + current.name + ')'});\n      }\n\n      templates.save_as = () => {\n        const name = templates.save_as_value;\n        const options = chartWindow.get_chart_options(dialog_id);\n        if(options) {\n          options.name = name;\n          const array = local_storage.get('templates');\n          if(array.map(t => t.name).includes(name)) {\n            $.growl.error({message: 'Template name already exists'.i18n() });\n            return;\n          }\n          array.push(options);\n          templates.current = options;\n          local_storage.set('templates', array);\n          templates.array = array;\n          route.update('menu');\n          chartWindow.set_chart_options(dialog_id, options); /* update the name */\n        }\n      }\n\n      templates.remove = (tmpl) => {\n        let array = local_storage.get('templates');\n        templates.array = array.filter(t => t.name !== tmpl.name);\n        local_storage.set('templates', templates.array);\n        if(templates.current && tmpl.name === templates.current.name) {\n          templates.current = null;\n        }\n      }\n\n      templates.rename = tmpl => {\n        templates.rename_value = tmpl.name;\n        templates.rename_tmpl = tmpl;\n        route.update('rename');\n      }\n\n      templates.do_rename = () => {\n        const name = templates.rename_tmpl.name;\n        const new_name = templates.rename_value;\n        const array = local_storage.get('templates');\n        if(array.map(t => t.name).includes(new_name)) {\n            $.growl.error({message: 'Template name already exists'.i18n() });\n            return;\n        };\n        const tmpl = array.find(t => t.name === name);\n        if(tmpl) {\n          tmpl.name = new_name;\n          local_storage.set('templates', array);\n          templates.array = array;\n          route.update('templates');\n\n          /* update template name in chartWindow options */\n          const current = chartWindow.get_chart_options(dialog_id);\n          if(current.name == name) {\n            templates.current = current;\n            current.name = new_name;\n            chartWindow.set_chart_options(dialog_id, current);\n          }\n        }\n      }\n\n      templates.apply = tmpl => {\n        chartWindow.apply_chart_options(dialog_id, tmpl);\n        templates.current = tmpl;\n      }\n\n      return state;\n    }\n\n    unbind() {\n      this.view && this.view.unbind();\n      this.view = null;\n    }\n  }\n\n  return {\n    init: (root, dialog_id) => new ChartTemplateManager(root, dialog_id)\n  }\n});\n"]}
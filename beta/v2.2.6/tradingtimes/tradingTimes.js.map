{"version":3,"sources":["../../../../src/tradingtimes/tradingTimes.es6"],"names":["table","tradingWin","select","sub_select","processData","markets","activeSymbols","market_names","submarket_names","filter","allInstruments","eMarket","submarkets","forEach","concat","f","instruments","some","found","find","symbol","eInstrument","is_trading_suspended","exchange_is_open","market","push","display_name","submarket","getRowsFor","marketname","submarket_name","m","symbols","s","rows","map","sym","times","open","close","settlement","events","descrip","dates","init","$menuLink","require","click","createBlankWindow","title","i18n","dialogClass","width","height","track","module_id","is_unique","data","dialog","initTradingWin","moveToTop","$html","subheader","appendTo","dataTable","className","paging","ordering","searching","processing","parent","addClass","api","columns","every","column","header","on","search","value","draw","refreshTable","yyyy_mm_dd","processing_msg","attr","show","updateTable","result","market_name","remove","add","refresh","active_symbols","extractChartableMarkets","makeSelectmenu","list","inx","changed","val","update_list","hide","getCachedData","Promise","all","cached","send","trading_times","then","catch","error","growl","message","liveapi","utc","format","maxDate","toDate","addDateToHeader","date"],"mappings":"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","file":"tradingTimes.js","sourcesContent":["ï»¿/**\n * Created by amin on 10/5/15.\n */\nimport $ from 'jquery';\nimport windows from 'windows/windows';\nimport liveapi from 'websockets/binary_websockets';\nimport menu from 'navigation/menu';\nimport 'datatables';\nimport 'jquery-growl';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nlet table = null;\nlet tradingWin = null;\nlet select = null;\nlet sub_select = null;\n\n/* data: result of trading_times api */\nconst processData = (markets, activeSymbols) => {\n   markets = markets || [];\n   //    || [{\n   //    display_name: 'Forex',\n   //    submarkets: [{\n   //        display_name: 'Major Paris',\n   //        instruments: [{\n   //            delay_amount: 0,\n   //            events: [{dates:'Fridays',descrip:'Closes early at(21:00)'}],\n   //            display_name: 'AUD/JPY',\n   //            settlement: '23:59:59',\n   //            symbol: 'frxAUDJPY',\n   //            times: {\n   //                close: ['23:59:59'],\n   //                open: ['00:00:00']\n   //            }\n   //        }]\n   //    }]\n   //}];\n   /* extract market and submarket names */\n   const market_names = [];\n   const submarket_names = { };\n   markets\n    .filter(eMarket => {\n      let allInstruments = [];\n      eMarket.submarkets.forEach(f => allInstruments = allInstruments.concat(f.instruments));\n      return _.some(allInstruments, eInstrument => {\n        const found = (activeSymbols.find(f => f.symbol === eInstrument.symbol) || {});\n        return !found.is_trading_suspended && found.exchange_is_open;\n      });\n    })\n    .forEach((market) => {\n      market_names.push(market.display_name);\n      submarket_names[market.display_name] = [];\n      market.submarkets.forEach(\n        (submarket) => submarket_names[market.display_name].push(submarket.display_name)\n     )\n   });\n\n   /* get the rows for this particular marketname and sumbarket_name */\n   const getRowsFor = (marketname, submarket_name) => {\n      // TODO: comeback and use lodash once 'trade module' changes got merged.\n      const market = markets.filter((m) => (m.display_name == marketname))[0];\n      const symbols = market && market.submarkets.filter((s) => (s.display_name == submarket_name))[0].instruments;\n\n      const rows = (symbols || []).map((sym) => {\n         return [\n            sym.display_name,\n            sym.times.open[0],\n            sym.times.close[0],\n            sym.times.settlement || sym.settlement || '-',\n            sym.events[0] ? sym.events[0].descrip + ':' + sym.events[0].dates : '-'\n         ];\n      });\n      return rows;\n   }\n\n   return {\n      market_names: market_names,\n      submarket_names: submarket_names,\n      getRowsFor: getRowsFor\n   };\n}\n\nexport const init = ($menuLink) => {\n   require([\"css!tradingtimes/tradingTimes.css\"]);\n   $menuLink.click(() => {\n      if (!tradingWin) {\n         tradingWin = windows.createBlankWindow($('<div/>'), {\n            title: 'Trading Times'.i18n(),\n            dialogClass: 'tradingTimes',\n            width: 700 ,\n            height: 400\n         });\n         tradingWin.track({\n            module_id: 'tradingTimes',\n            is_unique: true,\n            data: null\n         });\n         tradingWin.dialog('open');\n         require(['text!tradingtimes/tradingTimes.html'], initTradingWin);\n      }\n      else\n         tradingWin.moveToTop();\n   });\n}\n\nconst initTradingWin = ($html) => {\n   $html = $($html).i18n();\n   const subheader = $html.filter('.trading-times-sub-header');\n   table = $html.filter('table');\n   $html.appendTo(tradingWin);\n\n   table = table.dataTable({\n      data: [],\n      \"columnDefs\": [\n         { className: \"dt-body-center dt-header-center\", \"targets\": [ 0,1,2,3,4 ] }\n      ],\n      paging: false,\n      ordering: false,\n      searching: true,\n      processing: true\n   });\n   table.parent().addClass('hide-search-input');\n\n   // Apply the a search on each column input change\n   table.api().columns().every(function () {\n      const column = this;\n      $('input', this.header()).on('keyup change', function () {\n         if (column.search() !== this.value)\n            column.search(this.value) .draw();\n      });\n   });\n\n   let market_names = null,\n      submarket_names = null;\n\n   const refreshTable = (yyyy_mm_dd) => {\n      const processing_msg = $('#' + table.attr('id') + '_processing').show();\n\n      /* update the table with the given marketname and submarketname */\n      const updateTable =(result, market_name,submarket_name) => {\n         const rows = result.getRowsFor(market_name, submarket_name);\n         table.api().rows().remove();\n         table.api().rows.add(rows);\n         table.api().draw();\n      }\n\n      /* refresh the table with result of {trading_times:yyyy_mm_dd} from WS */\n      const refresh = (data, active_symbols) => {\n         data = menu.extractChartableMarkets(data);\n\n         const result = processData(data, active_symbols.active_symbols || []);\n\n          if (market_names == null) {\n              select = $('<select />');\n              select.appendTo(subheader);\n              market_names = windows.makeSelectmenu(select, {\n                list: result.market_names,\n                inx: 0,\n                changed: (val) => {\n                    submarket_names.update_list(result.submarket_names[val]);\n                    updateTable(result, market_names.val(), submarket_names.val());\n                }\n              });\n          } else {\n            select.update_list(result.market_names);\n          }\n\n          if (submarket_names == null) {\n              sub_select = $('<select />');\n              sub_select.appendTo(subheader);\n              submarket_names = windows.makeSelectmenu(sub_select, {\n                list: result.submarket_names[market_names.val()],\n                inx: 0,\n                changed: (val) => updateTable(result, market_names.val(), submarket_names.val())\n              });\n          } else {\n            sub_select.update_list(result.submarket_names[market_names.val()]);\n          }\n\n          updateTable(result, market_names.val(), submarket_names.val());\n          processing_msg.hide();\n         \n      };\n\n      const getCachedData = () => Promise.all([\n        liveapi.cached.send({ trading_times: yyyy_mm_dd }),\n        liveapi.send({ active_symbols: 'brief' }),\n      ])\n      .then(result => refresh(result[0], result[1]))\n      .catch((error) => {\n        $.growl.error({ message: error.message });\n        refresh({}, {});\n      });\n\n      getCachedData();\n      require(['websockets/binary_websockets'], (liveapi) => {\n          liveapi.events.on('login', getCachedData);\n          liveapi.events.on('logout', getCachedData);\n       });\n   }\n\n   refreshTable(moment.utc().format('YYYY-MM-DD'));\n   const maxDate = moment.utc().add(1, 'years').toDate();\n   tradingWin.addDateToHeader({\n      title: 'Date: ',\n      date: moment.utc().toDate(),\n      changed: refreshTable,\n      maxDate,\n   });\n}\n\nexport default {\n   init\n}\n"]}
{"version":3,"sources":["../../../../src/charts/chartTemplateManager.es6"],"names":["define","$","chartWindow","rv","require","local_storage","get","set","ChartTemplateManager","root","dialog_id","_this","templates","forEach","tmpl","random","hashCode","JSON","stringify","state","init_state","append","html","i18n","view","bind","chart","highcharts","route","value","menu","save_changes_disabled","array","save_as_value","rename_tmpl","rename_value","current","current_tmpl","get_chart_options","_","findIndex","t","update","save_as","options","name","timePeriod","type","concat","indicators","map","ind","overlays","overlay","displaySymbol","join","substring","save_changes","inx","push","growl","notice","message","text","open_file_selector","event","find","click","upload","file","target","files","reader","FileReader","onload","e","contents","result","data","parse","hash","error","apply","readAsText","preventDefault","includes","set_chart_options","download","json","download_file_in_browser","remove","filter","rename","do_rename","new_name","apply_chart_options","confirm","action","currentTarget","confirm_prevMenu","confirm_text","confirm_yes","confirm_no","s","split","reduce","a","b","charCodeAt","unbind","init"],"mappings":"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","file":"chartTemplateManager.js","sourcesContent":["/**\n * Created by amin on July 31, 2016.\n */\ndefine(['jquery', 'charts/chartWindow', 'common/rivetsExtra'], function($, chartWindow, rv) {\n  require(['text!charts/chartTemplateManager.html']);\n\n  if(!local_storage.get('templates')) {\n    local_storage.set('templates', []);\n  }\n\n  class ChartTemplateManager {\n    constructor(root, dialog_id) { \n      const _this = this;\n      const templates = local_storage.get(\"templates\");\n      templates.forEach(function(tmpl){\n        if(!tmpl.random){\n          const random = _this.hashCode(JSON.stringify(tmpl));\n          tmpl.random = random;\n        }\n      });\n      local_storage.set(\"templates\",templates);\n\n      const state = this.init_state(root, dialog_id);\n      require(['text!charts/chartTemplateManager.html'], html => {\n        root.append(html.i18n());\n        this.view = rv.bind(root[0], state);\n      });\n    }\n\n    init_state(root, dialog_id) {\n      const chart = $('#' + dialog_id + '_chart').highcharts();\n      const state = {\n        route: { value: 'menu' },\n        menu: {\n          save_changes_disabled: true\n        },\n        templates: {\n          array: local_storage.get('templates'),\n          save_as_value: '',\n          rename_tmpl: null,\n          rename_value: '',\n          current: null,\n        }\n      };\n      const {route, templates, menu} = state;\n\n      /* persist applied templates between page reloads */\n      const current_tmpl = chartWindow.get_chart_options(dialog_id);\n      delete current_tmpl.random;\n      current_tmpl.random = this.hashCode(JSON.stringify(current_tmpl));\n      templates.array = local_storage.get(\"templates\");\n      if(_.findIndex(templates.array, t => t.random === current_tmpl.random) !== -1) {\n        templates.current = current_tmpl;\n      }\n      \n      route.update = value => {\n        route.value = value;\n      };\n\n      menu.save_as = () => {\n        const options = chartWindow.get_chart_options(dialog_id) || {};\n        options.name = [`${options.timePeriod} ${options.type}`]\n                      .concat(options.indicators.map(ind => ind.name))\n                      .concat(options.overlays.map(overlay => overlay.displaySymbol))\n                      .join(' + ');\n        templates.save_as_value = options.name.substring(0,20);\n        route.update('save-as');\n      }\n\n      menu.templates = () => {\n        templates.array = local_storage.get('templates'); // it can be modified from other dialogs.\n        route.update('templates');\n      }\n\n      menu.save_changes = () => {\n        const current = chartWindow.get_chart_options(dialog_id);\n        delete current.random;\n        current.random = this.hashCode(JSON.stringify(current));\n\n        const name = current.name;\n        const array = local_storage.get('templates');\n        const inx = _.findIndex(array, t => t.name === name);\n        if(inx !== -1) {\n          array[inx] = current;\n        } else {\n          array.push(current);\n        }\n        local_storage.set('templates', array);\n        templates.array = array;\n        templates.current = current;\n        $.growl.notice({message: $(\"<div/>\").text('Template changes saved '.i18n() + '(' + current.name + ')').html()});\n      }\n\n      menu.open_file_selector = (event) => {\n        $(root).find(\"input[type=file]\").click();\n      }\n\n      menu.upload = (event) => {\n        const file = event.target.files[0];\n        event.target.files = null;\n        event.target.value = null;\n        if(!file)\n          return;\n\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          const contents = e.target.result;\n          const array = local_storage.get(\"templates\");\n          let data = null;\n          try{\n            data = JSON.parse(contents);\n            const hash = data.random;\n            delete data.random;\n            if(hash !== this.hashCode(JSON.stringify(data))){\n              throw \"Invalid JSON file\".i18n();\n            }\n            data.random = hash;\n             \n            //Check if template is already uploaded.\n            array.forEach(function(tmpl){\n              if(tmpl.random == data.random){\n                throw \"Template already exists\".i18n();\n              }\n            });\n\n            if(!data.indicators) {\n              throw \"Invalid template type\".i18n();\n            }\n          } catch(e){\n            $.growl.error({message:e});\n            return;\n          }\n          templates.apply(data);\n          array.push(data);\n          local_storage.set('templates', array);\n          templates.array = array;\n          $.growl.notice({message: \"Successfully applied the template and saved it as \".i18n() + \"<b>\" + data.name + \"</b>\"});\n        }\n\n        reader.readAsText(file);\n      }\n\n      templates.save_as = (event) => {\n        event.preventDefault();\n        const name = templates.save_as_value.substring(0,20);\n        const options = chartWindow.get_chart_options(dialog_id);\n        if(options) {\n          options.name = name;\n          const array = local_storage.get('templates');\n          if(array.map(t => t.name).includes(name)) {\n            $.growl.error({message: 'Template name already exists'.i18n() });\n            return;\n          }\n          delete options.random;\n          options.random = this.hashCode(JSON.stringify(options));\n          array.push(options);\n          templates.current = options;\n          local_storage.set('templates', array);\n          templates.array = array;\n          route.update('menu');\n          chartWindow.set_chart_options(dialog_id, options); /* update the name */\n        }\n      }\n\n      templates.download = (tmpl) => {\n        var json = JSON.stringify(tmpl);\n        download_file_in_browser(tmpl.name + '.json', 'text/json;charset=utf-8;', json);\n        $.growl.notice({message: \"Downloading template as <b>\".i18n() + tmpl.name + \".json</b>\"});\n      }\n\n      templates.remove = (tmpl) => {\n        let array = local_storage.get('templates');\n        templates.array = array.filter(t => t.name !== tmpl.name);\n        local_storage.set('templates', templates.array);\n        if(templates.current && tmpl.name === templates.current.name) {\n          templates.current = null;\n        }\n      }\n\n      templates.rename = tmpl => {\n        templates.rename_value = tmpl.name;\n        templates.rename_tmpl = tmpl;\n        route.update('rename');\n      }\n\n      templates.do_rename = (event) => {\n        event.preventDefault();\n        const name = templates.rename_tmpl.name;\n        const new_name = templates.rename_value.substring(0,20);\n        const array = local_storage.get('templates');\n        if(array.map(t => t.name).includes(new_name)) {\n            $.growl.error({message: 'Template name already exists'.i18n() });\n            return;\n        };\n        const tmpl = array.find(t => t.name === name);\n        if(tmpl) {\n          delete tmpl.random;\n          tmpl.name = new_name;\n          tmpl.random = this.hashCode(JSON.stringify(tmpl));\n          local_storage.set('templates', array);\n          templates.array = array;\n          route.update('templates');\n\n          /* update template name in chartWindow options */\n          const current = chartWindow.get_chart_options(dialog_id);\n          if(current.name == name) {\n            current.name = new_name;\n            delete current.random;\n            current.random = this.hashCode(JSON.stringify(current));\n            chartWindow.set_chart_options(dialog_id, current);\n            templates.current = current;\n          }\n        }\n      }\n\n      templates.apply = tmpl => {\n        chartWindow.apply_chart_options(dialog_id, tmpl);\n        templates.current = tmpl;\n      }\n\n      templates.confirm = (tmpl, event) => {\n        route.update(\"confirm\");\n        const action = event.currentTarget.text;\n        templates.confirm_prevMenu = action === \"Delete\".i18n() ? \"templates\" : \"menu\";\n        templates.confirm_text = action === \"Delete\" ? \"Are you sure you want to delete template?\".i18n() : \"Are you sure you want to overwrite current template?\".i18n();\n\n        templates.confirm_yes = () => {\n          action === \"Delete\".i18n()? templates.remove(tmpl) : menu.save_changes();\n          templates.confirm_no();\n        }\n\n        templates.confirm_no = () => {\n          route.update(templates.confirm_prevMenu);\n        }\n      }\n\n      return state;\n    }\n\n    hashCode(s) {\n      return s.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);\n    }\n\n    unbind() {\n      this.view && this.view.unbind();\n      this.view = null;\n    }\n  }\n\n  return {\n    init: (root, dialog_id) => new ChartTemplateManager(root, dialog_id)\n  }\n});\n"]}
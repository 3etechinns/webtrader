{"version":3,"sources":["../../../../src/websockets/validateToken.es6"],"names":["token","Promise","resolve","reject","config","local_storage","get","i18n_name","value","api_url","websocket_url","ws","WebSocket","addEventListener","send","JSON","stringify","data","parse","msg","authorize","close","event","error"],"mappings":";;;;;;;oBAee,UAACA,KAAD,EAAW;AACxB,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,UAAMC,SAASC,cAAcC,GAAd,CAAkB,QAAlB,CAAf;AACA,UAAMC,YAAY,CAACF,cAAcC,GAAd,CAAkB,MAAlB,KAA6B,EAAEE,OAAO,IAAT,EAA9B,EAA+CA,KAAjE;AACA,UAAMC,UAAU,CAAEL,UAAUA,OAAOM,aAAlB,IAAqC,2CAA2CH,SAAjF,IAA8F,UAA9F,4BAAhB;AACA,UAAMI,KAAK,IAAIC,SAAJ,CAAcH,OAAd,CAAX;;AAEAE,SAAGE,gBAAH,CAAoB,MAApB,EAA4B,YAAM;AAChCF,WAAGG,IAAH,CAAQC,KAAKC,SAAL,CAAe;AACrB,uBAAahB;AADQ,SAAf,CAAR;AAGD,OAJD;AAKAW,SAAGE,gBAAH,CAAoB,OAApB,EAA6B,YAAM,CAAE,CAArC;AACAF,SAAGE,gBAAH,CAAoB,SAApB,EAA+B,eAAO;AACpC,YAAMI,OAAOF,KAAKG,KAAL,CAAWC,IAAIF,IAAf,CAAb;AACAf,gBAAQe,KAAKG,SAAb;AACAT,WAAGU,KAAH;AACD,OAJD;;AAMAV,SAAGE,gBAAH,CAAoB,OAApB,EAA6B,UAACS,KAAD;AAAA,eAAWnB,OAAOmB,MAAMC,KAAb,CAAX;AAAA,OAA7B;AACD,KAnBM,CAAP;AAoBD,G","file":"validateToken.js","sourcesContent":["/**\n * Created by Arnab Karmakar on 11/13/17.\n *\n * History -\n *  CopyTrader and MAM are two modules in Webtrader which requires token validation.\n *  This token is not user's token. It is either traders' or other users' token.\n *  In order to understand more about what these tokens are, please visit these screens.\n *  I had a detailed discussion with backend team. As of 13th Nov 2017, either there\n *  are no backend resources to create new API for token validation or they are\n *  reluctant to do so. Based on my discussion with Tom, he recommended this approach\n *  for now.\n */\nimport 'common/util';\nimport { app_id } from 'websockets/binary_websockets';\n\nexport default (token) => {\n  return new Promise((resolve, reject) => {\n    const config = local_storage.get('config');\n    const i18n_name = (local_storage.get('i18n') || { value: 'en' }).value;\n    const api_url = ((config && config.websocket_url)  || 'wss://ws.binaryws.com/websockets/v3?l=' + i18n_name) + '&app_id=' + app_id;\n    const ws = new WebSocket(api_url);\n\n    ws.addEventListener('open', () => {\n      ws.send(JSON.stringify({\n        \"authorize\": token\n      }));\n    });\n    ws.addEventListener('close', () => {});\n    ws.addEventListener('message', msg => {\n      const data = JSON.parse(msg.data);\n      resolve(data.authorize);\n      ws.close();\n    });\n\n    ws.addEventListener('error', (event) => reject(event.error));\n  });\n};\n"]}